// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  MODERATOR
  USER
}

model User {
  id                  String        @id @default(cuid())
  accountName         String        @unique
  email               String        @unique
  emailVerified       DateTime?
  firstName           String
  lastName            String
  country             String
  secretCode          String
  password            String
  role                ROLE          @default(USER)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  sessions            Session[]
  sendTransactions    Transaction[] @relation("senderUser")
  receiveTransactions Transaction[] @relation("receiverUser")
  accounts            Account[]
  assets              Asset[]
}

model Asset {
  id         String @id @default(cuid())
  user       User   @relation(fields: [userId], references: [id])
  userId     String
  symbol     String
  quantities Int

  @@unique([userId, symbol])
}

enum STATUS {
  PAID
  PENDING
}

model Transaction {
  id         String   @id @default(cuid())
  from       User     @relation(name: "senderUser", fields: [senderId], references: [id])
  senderId   String
  to         User     @relation(name: "receiverUser", fields: [receiverId], references: [id])
  receiverId String
  symbol     String
  quantities Int
  status     STATUS
  createdAt  DateTime @default(now())
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
